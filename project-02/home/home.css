* {
  box-sizing: border-box;
}
@font-face {
  font-family: 'Trap';
  /* changed the format to "opentype" rather than "otf" */
  src: url('fonts/Trap-Bold.otf')format('opentype');
}
@font-face {
  font-family:'Trap-Black' ;
  /* changed the format to "opentype" rather than "otf" */
  src: url('fonts/Trap-Black.otf')format('opentype');
}

@font-face {
  font-family:'Lazord-Bold' ;
  /* changed the format to "opentype" rather than "otf" */
  src: url('fonts/Lazord-Bold.otf')format('opentype');
}

body {
  width: 100vw;
  height: 100vh;
  margin: 0;
  font-family: 'Lazord-Bold'; 
  background-color:rgb(0, 0, 0);
  color: rgb(255, 255, 255);

  /* removing this stuff since we're adding the images directly in HTML and also dealing with positioning with flexbox on the image container "divbutton" below */
  /* background-image:url("img/zp-logo.gif") ;
  background-repeat: no-repeat;
  background-size:45% ;
  background-position:center;
  margin-bottom: -8%; */
  }

  
.tcontainer {
  width: 100%;
  /* heads up, "hidden" was misspelled as "hiden" */
  overflow: hidden;
  position: fixed;
  margin: 0 auto;
  /* changed max-width to width */
  width: 2000px;
  bottom:0;

 
}
.ticker-wrap {
  width: 100%;
  height: 60px;

  /* i'm moving the animation to the ticker item itself, so you don't need to push it off the page to begin with a padding property */
  /* padding-left: 100%; */
  background-color: #BBFD00;
  margin: 0px;
}
.ticker-move {
  display: inline-block;
  white-space:nowrap;

  /* i'm moving the animation to the ticker item itself, so we can deal with the actual width of the text. this means the padding-right property is also defunct, since you don't have to account for pushing the inner text into position */
  /* padding-right: 100%; */
  /* animation-timing-function: linear; */
  /* animation: ticker 20s linear infinite; */
  /* animation-name: ticker; */
}
@keyframes ticker {
  /* for the transforms, i changed the "translate3D(value, value, value)" to just "translate(value)" because you're only moving something along the x-axis. */

  /* translating 100% over, which means "take the full width of this thing and move it over by that much */
  0% { transform: translate(100%); }

  /* don't need a halfway point because it's just a linear animation all the way through */
  /* 50% { transform: translate3d(-50%, 0, 0); } */

  100% { transform: translate(-100%); }
}

/* changed this hover to ".ticker-item" rather than ".ticker-move" since i moved the animation to ".ticker-item" below */
.ticker-item:hover {
  animation-play-state:paused;
}

.ticker-item {
  display:-ms-inline-flexbox;
  font-size: 30px;
  /* width: 100%; */
  font-family: 'Lazord-Bold'; 
  color: rgb(0, 0, 0);
  margin-top: 12px;
  text-transform:lowercase;
  letter-spacing: 2px;  

  /* added the ticker animation here. i also added the "linear" straight into the shorthand instead of writing a separate animation-timing-function property for it */
     animation: ticker 20s linear infinite;
}

.divbutton{
  /* commented out the display: block bc things are display: block by default */
  /* display: block; */

  /* added CSSâ€”width 100% to make it take up the full width of the body, height should also be 100%, but because of your fixed ticker, i used calc to take into account the 80px ticker height. this width and height stuff is to be able to use flexbox to center the image on the page. */
  width: 100%;
  height: calc(100% - 80px);

  /* using flexbox here, which is an easy way of both vertically and horizontally centering something. justify-content takes care of horizontal centering while align-items takes care of vertical */
  display: flex;
  justify-content: center;
  align-items: center;
}

/* this selector is to select <a> tags that are direct children of something with class "divbutton". you could just select by "a", but just in case you add more <a> tags in the future with different styling, i wanted to be specific here. */
.divbutton > a {
  /* pulled this width from the width you had set for your logo when it was a background image on the body */
  width: 50%;
}

img {
  /* this CSS is to make sure your img elements take up the full width of the container, while maintaining aspect ratio. since its container is the <a> tag, the image will be 45% of the page width, inherited from its parent (the <a> tag it's wrapped in) */
  width: 100%;
  height: auto;
}

a:hover {
  /* position properties are no longer relevant since we're using flexbox to center the images on the page */
  /* position: relative; */

  /* i added quotation marks around the path to your image. whenever you're using "url( )" in CSS, make sure whatever goes inside it is a string. the "pointer" afterwards is a fallback, in case for whatever reason the image doesn't load, then you still get the default pointer cursor (the little hand signifying clickable elements) rather than the default arrow cursor */
  cursor: url("img/thumbemoji.png"), pointer;

  /* the below is no longer relevant since we put the hibutton image directly in HTML. */
  /* background-image: url("img/hibutton-02.png"); */
  /* display: block;
  position: absolute; */
}

/* setting the initial state of the hibutton to none so we can use JS to toggle it on and off */
.hibutton {
  display: none;
}


 